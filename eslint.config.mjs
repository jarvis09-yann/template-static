import js from "@eslint/js";
import globals from "globals";
import json from "@eslint/json";
import markdown from "@eslint/markdown";
import css from "@eslint/css";
import { defineConfig } from "eslint/config";

export default defineConfig([
  {
    files: ["**/*.{js,mjs,cjs}"],
    plugins: { js },
    extends: ["js/recommended", "prettier"],
  },
  {
    files: ["**/*.{js,mjs,cjs}"],
    languageOptions: { globals: globals.browser },
  },
  {
    files: ["**/*.json"],
    plugins: { json },
    language: "json/json",
    extends: ["json/recommended"],
  },
  {
    files: ["**/*.md"],
    plugins: { markdown },
    language: "markdown/gfm",
    extends: ["markdown/recommended"],
  },
  {
    files: ["**/*.css"],
    plugins: { css },
    language: "css/css",
    extends: ["css/recommended"],
  },
  {
    rules: {
      // 'array-bracket-newline': ['warn', 'always'],
      "array-bracket-spacing": ["warn", "never"],
      "array-callback-return": "warn",
      "arrow-body-style": ["warn", "as-needed"],
      "arrow-parens": ["warn", "always"],
      "block-spacing": "warn",
      "brace-style": ["warn", "1tbs"],
      camelcase: "warn",
      // 'capitalized-comments': ['warn', 'always'],
      "class-methods-use-this": "off",
      "comma-dangle": ["warn", "always-multiline"],
      "comma-spacing": "warn",
      "comma-style": ["warn", "last"],
      complexity: ["warn", 20],
      "consistent-return": "warn",
      "consistent-this": ["warn", "self"],
      curly: "warn",
      "default-case": "warn",
      "dot-notation": "warn",
      eqeqeq: "off", // man i hate ===
      "eol-last": "warn",
      "func-call-spacing": "warn",
      "func-names": "warn",
      "function-paren-newline": ["warn", "consistent"],
      "generator-star-spacing": ["warn", { before: false, after: true }],
      // 'guard-for-in': 'warn',
      // 'id-length': 'warn',
      // 'import/no-unresolved': 'warn',
      // 'indent': ['warn', 2],
      "keyword-spacing": "warn",
      "max-len": ["warn", { code: 80 }],
      "no-alert": "warn",
      "no-array-constructor": "warn",
      "no-continue": "warn",
      "no-else-return": "warn",
      "no-eq-null": "off", // Relax on using == null
      "no-extra-bind": "warn",
      "no-invalid-this": "warn",
      "no-loop-func": "warn",
      "no-multi-assign": "warn",
      "no-multi-spaces": "warn",
      "no-new": "warn",
      "no-redeclare": "warn",
      "no-return-assign": "warn",
      "no-self-compare": "warn",
      "no-sequences": "warn",
      "no-unused-vars": ["warn", { args: "none" }],
      "no-useless-concat": "warn",
      "no-void": "warn",
      "object-curly-newline": ["warn", { multiline: true, consistent: true }],
      "object-curly-spacing": ["warn", "always"],
      "object-shorthand": "warn",
      "one-var": ["warn", "never"],
      "operator-linebreak": ["warn", "before"],
      "prefer-const": "warn",
      "prefer-destructuring": "warn",
      "prefer-template": "warn",
      // 'quote-props': ['warn', 'as-needed'],
      quotes: "off", // No enforced quote style
      semi: ["warn", "always"],
      "semi-spacing": "warn",
      // 'sort-imports': ['warn', { ignoreCase: true }],
      // 'sort-keys': 'warn',
      "spaced-comment": "warn",
      strict: "warn",
      "switch-colon-spacing": "warn",
      "template-curly-spacing": "warn",
      "yield-star-spacing": "warn",
      "no-console": "warn",
    },
  },
]);
